AWSTemplateFormatVersion: 2010-09-09
Resources:
  CloudMap:
    Properties:
      Description: Service Map for Docker Compose project myproject
      Name: myproject.local
      Vpc: vpc-031c120c3f45339ec
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
  Cluster:
    Properties:
      ClusterName: myproject
      Tags:
      - Key: com.docker.compose.project
        Value: myproject
    Type: AWS::ECS::Cluster
  Default80Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: my-nginx-container:80/tcp on default network
      FromPort: 80
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: TCP
      ToPort: 80
    Type: AWS::EC2::SecurityGroupIngress
  Default3000Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: my-node-container:3000/tcp on default network
      FromPort: 3000
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: TCP
      ToPort: 3000
    Type: AWS::EC2::SecurityGroupIngress
  Default3306Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: mysql-container:3306/tcp on default network
      FromPort: 3306
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: TCP
      ToPort: 3306
    Type: AWS::EC2::SecurityGroupIngress
  DefaultNetwork:
    Properties:
      GroupDescription: myproject Security Group for default network
      Tags:
      - Key: com.docker.compose.project
        Value: myproject
      - Key: com.docker.compose.network
        Value: myproject_default
      VpcId: vpc-031c120c3f45339ec
    Type: AWS::EC2::SecurityGroup
  DefaultNetworkIngress:
    Properties:
      Description: Allow communication within network default
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: DefaultNetwork
    Type: AWS::EC2::SecurityGroupIngress
  LoadBalancer:
    Properties:
      LoadBalancerAttributes:
      - Key: load_balancing.cross_zone.enabled
        Value: "true"
      Scheme: internet-facing
      Subnets:
      - subnet-001cef9731470bb33
      - subnet-0e357d43733b242d4
      - subnet-0f4bb542ea11d161d
      Tags:
      - Key: com.docker.compose.project
        Value: myproject
      Type: network
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  LogGroup:
    Properties:
      LogGroupName: /docker-compose/myproject
    Type: AWS::Logs::LogGroup
  MynginxcontainerService:
    DependsOn:
    - MynginxcontainerTCP80Listener
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: my-nginx-container
        ContainerPort: 80
        TargetGroupArn:
          Ref: MynginxcontainerTCP80TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-001cef9731470bb33
          - subnet-0e357d43733b242d4
          - subnet-0f4bb542ea11d161d
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - MynginxcontainerServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: myproject
      - Key: com.docker.compose.service
        Value: my-nginx-container
      TaskDefinition:
        Ref: MynginxcontainerTaskDefinition
    Type: AWS::ECS::Service
  MynginxcontainerServiceDiscoveryEntry:
    Properties:
      Description: '"my-nginx-container" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: my-nginx-container
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  MynginxcontainerTCP80Listener:
    Properties:
      DefaultActions:
      - ForwardConfig:
          TargetGroups:
          - TargetGroupArn:
              Ref: MynginxcontainerTCP80TargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: TCP
    Type: AWS::ElasticLoadBalancingV2::Listener
  MynginxcontainerTCP80TargetGroup:
    Properties:
      Port: 80
      Protocol: TCP
      Tags:
      - Key: com.docker.compose.project
        Value: myproject
      TargetType: ip
      VpcId: vpc-031c120c3f45339ec
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  MynginxcontainerTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - eu-north-1.compute.internal
        - myproject.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: myproject
        Name: Mynginxcontainer_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Mynginxcontainer_ResolvConf_InitContainer
        Essential: true
        Image: 230374442770.dkr.ecr.eu-north-1.amazonaws.com/nginxrepo:latest@sha256:e3dae70bfebed4e525607e2055b1d04720dbf1035c7ef4742e15f6a7a411df9a
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: myproject
        Name: my-nginx-container
        PortMappings:
        - ContainerPort: 80
          HostPort: 80
          Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Ref: MynginxcontainerTaskExecutionRole
      Family: myproject-my-nginx-container
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  MynginxcontainerTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: myproject
      - Key: com.docker.compose.service
        Value: my-nginx-container
    Type: AWS::IAM::Role
  MynodecontainerService:
    DependsOn:
    - MynodecontainerTCP3000Listener
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: my-node-container
        ContainerPort: 3000
        TargetGroupArn:
          Ref: MynodecontainerTCP3000TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-001cef9731470bb33
          - subnet-0e357d43733b242d4
          - subnet-0f4bb542ea11d161d
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - MynodecontainerServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: myproject
      - Key: com.docker.compose.service
        Value: my-node-container
      TaskDefinition:
        Ref: MynodecontainerTaskDefinition
    Type: AWS::ECS::Service
    MynodecontainerServiceDiscoveryEntry:
    Properties:
      Description: '"my-node-container" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: my-node-container
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  MynodecontainerTCP3000Listener:
    Properties:
      DefaultActions:
      - ForwardConfig:
          TargetGroups:
          - TargetGroupArn:
              Ref: MynodecontainerTCP3000TargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 3000
      Protocol: TCP
    Type: AWS::ElasticLoadBalancingV2::Listener
  MynodecontainerTCP3000TargetGroup:
    Properties:
      Port: 3000
      Protocol: TCP
      Tags:
      - Key: com.docker.compose.project
        Value: myproject
      TargetType: ip
      VpcId: vpc-031c120c3f45339ec
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  MynodecontainerTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - eu-north-1.compute.internal
        - myproject.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: myproject
        Name: Mynodecontainer_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Mynodecontainer_ResolvConf_InitContainer
        Essential: true
        Image: 230374442770.dkr.ecr.eu-north-1.amazonaws.com/myrepo:latest@sha256:5d4e9909e073c57d30bfe27cc1d5a8605af42123cba14012517152654e2f6630
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: myproject
        Name: my-node-container
        PortMappings:
        - ContainerPort: 3000
          HostPort: 3000
          Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Ref: MynodecontainerTaskExecutionRole
      Family: myproject-my-node-container
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  MynodecontainerTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: myproject
      - Key: com.docker.compose.service
        Value: my-node-container
    Type: AWS::IAM::Role
  MysqlcontainerService:
    DependsOn:
    - MysqlcontainerTCP3306Listener
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: mysql-container
        ContainerPort: 3306
        TargetGroupArn:
          Ref: MysqlcontainerTCP3306TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-001cef9731470bb33
          - subnet-0e357d43733b242d4
          - subnet-0f4bb542ea11d161d
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - MysqlcontainerServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: myproject
      - Key: com.docker.compose.service
        Value: mysql-container
      TaskDefinition:
        Ref: MysqlcontainerTaskDefinition
    Type: AWS::ECS::Service
  MysqlcontainerServiceDiscoveryEntry:
    Properties:
      Description: '"mysql-container" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: mysql-container
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  MysqlcontainerTCP3306Listener:
    Properties:
      DefaultActions:
      - ForwardConfig:
          TargetGroups:
          - TargetGroupArn:
              Ref: MysqlcontainerTCP3306TargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 3306
      Protocol: TCP
    Type: AWS::ElasticLoadBalancingV2::Listener
  MysqlcontainerTCP3306TargetGroup:
    Properties:
      Port: 3306
      Protocol: TCP
      Tags:
      - Key: com.docker.compose.project
        Value: myproject
      TargetType: ip
      VpcId: vpc-031c120c3f45339ec
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  MysqlcontainerTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - eu-north-1.compute.internal
        - myproject.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: myproject
        Name: Mysqlcontainer_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Mysqlcontainer_ResolvConf_InitContainer
        Environment:
        - Name: MYSQL_ROOT_PASSWORD
          Value: password
        Essential: true
        Image: docker.io/library/mysql:latest@sha256:c0455ac041844b5e65cd08571387fa5b50ab2a6179557fd938298cab13acf0dd
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: myproject
        Name: mysql-container
        PortMappings:
        - ContainerPort: 3306
          HostPort: 3306
          Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Ref: MysqlcontainerTaskExecutionRole
      Family: myproject-mysql-container
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  MysqlcontainerTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: myproject
      - Key: com.docker.compose.service
        Value: mysql-container
    Type: AWS::IAM::Role